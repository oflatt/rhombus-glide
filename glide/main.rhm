#lang rhombus


import:
  rhombus/meta open
  pict as pict
  rhombus/measure
  rhombus/runtime_path
  rhombus/fixnum expose:
    - as fm
  gui expose:
    ~>
    <~
  "traverse_rhombus.rhm" open
  "ui.rhm" open
  "stx_helpers.rhm" open
  "wrap_stx.rhm" open
  "elements.rhm" open
  "glide.rhm" open

export:
  glide
  pad
  draw_slide
  scale_to_fit
  all_from("elements.rhm")

fun draw_for(state):
  // draw a glide state to the dc
  fun draw(dc, glide):
    let current_rendered = glide.current_rendered(dc.size)
    current_rendered.selected_slide.draw(dc)
    glide.ui.draw(dc, glide.inputState, current_rendered)

    // if we need to save because data.code is different from data.old_code, draw save icon
    if glide.code != glide.old_code:
    | let savePict = scale_to_fit(save_icon(), [dc.size.width * 0.1, dc.size.height * 0.1]).pad(~top: dc.size.height * 0.9, ~left: dc.size.width * 0.9)
      savePict.draw(dc)
    | #false
  draw
  
fun save_icon():
  pict.overlay(
    pict.rectangle(~width: 50, ~height: 50, ~fill: "gray", ~line: "black", ~line_width: 3),
    pict.stack(pict.text("save"),
               pict.text("ctrl+s"))
  )



fun on_mousefor(state):
  fun on_mouse(ev :: gui.MouseEvent, area):
    state <~ fun (old): old.on_mouse(ev, area.client_size)
  on_mouse

fun onkeyfor(state):
  fun onkey(ev :: gui.KeyEvent, area):
    state <~ fun (old): old.onkey(ev)
  onkey


fun edit_slide(stx, config_stx):
  let tabs_stx = stx_to_list(get_tabs(stx))
  let num_tabs = tabs_stx.length() + 1
  let tabs:
    for List:
      each _i in 0..num_tabs
      Tab(0)

  let ui = UI(#false, eval(config_stx), config_stx, tabs, 0.15, num_tabs-1, SlideIndex(num_tabs-1, 0))
  let with_ids = add_pict_identities(stx)
  let state = gui.Obs(Glide(InputState(Action.none, 0, 0, 0, 0, #false), with_ids, with_ids, with_ids.srcloc(), ui))

  let win = gui.Window(gui.Canvas(state, draw_for(state), ~mouse: on_mousefor(state), ~key: onkeyfor(state)), ~size: [initialScreenW, initialScreenH])
  gui.render(win)

meta:
  import:
    "stx_helpers.rhm" open
    "traverse_rhombus.rhm" open
    "elements.rhm" open

  fun glide(syntax, config):
    '«edit_slide('$(syntax)', '$(config)')»'


defn.macro 'glide $config:
              $stx':
  glide(stx, config)
