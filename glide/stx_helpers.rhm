#lang rhombus

import:
  rhombus/meta open
  pict open
  pict/text open
  pict/rhombus open
  "traverse_rhombus.rhm" open
  "wrap_stx.rhm" open
  "rebuild.rhm" open

export:
  all_defined



// Adds a Glide Pict Identity to a pict
// This gives a reference to it for selection. Used internally 
// by the Glide editor and removed before saving back to the source file.
fun GPI__(pict, n):
  pict.set_metadata({ "GlidePictIdentity": n })


fun find_pict_from_gpi(pict, n):
  if pict.metadata().get("GlidePictIdentity", #false) == n
  | pict
  | block:
      (for any: 
        each child in pict.children
        find_pict_from_gpi(child, n))


fun is_glide_pict_clicked(overallpict, pict, ev):
  if pict.metadata().get("GlidePictIdentity", #false):
  | is_pict_clicked(overallpict, pict, ev)
  | #false

fun is_pict_clicked(overallpict, pict, ev):
  // special case: if pict is the nothing pict, it can't be clicked
  if pict == nothing
  | #false
  | let (x, y) = Find(pict, ~horiz: #'left, ~vert: #'top).in(overallpict)
    let (x2, y2) = Find(pict, ~horiz: #'right, ~vert: #'bottom).in(overallpict)
    println("identity: " +& pict.metadata().get("GlidePictIdentity", #false))
    println("x: " +& x +& " y: " +& y +& " x2: " +& x2 +& " y2: " +& y2)
    ev.x > x && ev.x < x2 && ev.y > y && ev.y < y2

// recursively find a pict that was clicked, picking
// a child if something is already selected
fun find_clicked_pict(pict, clickev, current_selected):
  println("pict: " +& pict)
  if current_selected:
  | block:
      let selected = find_pict_from_gpi(pict, current_selected)
      if is_glide_pict_clicked(pict, selected, clickev)
      | block:
          if selected.children.length() > 0:
          | find_first_clicked_pict(pict, selected.children, clickev)
          | find_first_clicked_pict(pict, [pict], clickev)
      | find_first_clicked_pict(pict, [pict], clickev)
  | find_first_clicked_pict(pict, [pict], clickev)

fun find_first_clicked_pict(overall_pict, pict_children, click):
  for any:
    each child in pict_children
    if is_glide_pict_clicked(overall_pict, child, click)
    | block:
        println("found clicked pict")
        child
    | find_first_clicked_pict(overall_pict, child.children, click)

// adds a keyword argument to a function call with the given value
// or modifies the value if the keyword is already present
fun modify_keyword_val_of(stx, keyword, new_val):
  match stx:
  | '$name($args, ...)':
      def mutable found = #false
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '$key: $val':
                            if key.to_source_string() == keyword
                            | block:
                                found := #true
                                '$key: $new_val'
                            | arg
                        | _: arg)
      let [new_arg, ...] = new_args
      '$name($(new_arg), ...)'
  | _: error("modify_keyword_val_of expects a function call")

fun add_to_keyword_val_of(stx, keyword, val_to_add):
  match stx:
  | '$name($args, ...)':
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '$key: $val':
                            if key.to_source_string() == keyword
                            | '$key: $val + $val_to_add'
                            | arg
                        | _: arg)
      let [new_arg, ...] = new_args
      '$name($(new_arg), ...)'
  | _: error("add_to_keyword_val_of expects a function call")

fun apply_to_gpi(stx, gpin, f):
  traverse_stx(stx,
               fun (stx):
                 match stx:
                 | 'GPI__($pict, $n)':
                     println("applying to gpi: " +& n)
                     if eval(n) == gpin
                     | f(stx)
                     | stx
                 | _: stx)

// finds the pict source code with the given GPI number,
// replacing the keyword value with new_val
fun modify_keyword_val(stx, gpin, keyword, new_val):
  apply_to_gpi(stx, gpin,
               fun (pict):
                 modify_keyword_val_of(pict, keyword, new_val))

fun add_to_keyword_val(stx, gpin, keyword, val_to_add):
  apply_to_gpi(stx, gpin,
               fun (pict):
                 add_to_keyword_val_of(pict, keyword, val_to_add))

fun add_padding_to(stx, gpin, dx, dy):
  let padding_left_pos = dx
  let padding_top_pos = dy
  let res:
    apply_to_gpi(stx, gpin,
                 fun (pict):
                  wrap_pad(pict, padding_left_pos, padding_top_pos))
  println("before: " +& stx.to_source_string())
  println("with padding: " +& res.to_source_string())
  println(res)
  res

fun replace_const(stx, newnum):
  match stx:
  | '$name ($arg, ...)':
      '$name ($(replace_const(arg, newnum)), ...)'
  | '~width: $num':
      '~width: $newnum'
  | _: stx


fun get_funcs(stx):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...

     let tabs:
       $tabs

     let slides:
      $slides':
      ['fun $name($args, ...):
          $body',
       ...]
  | _: error("get_funcs: invalid glide program. Expected sequence of functions, then tabs:, then slides:")

fun stx_to_list(stx):
  match stx:
  | '[$expr, ...]':
      [expr, ...]
  | _: error("expected list")

fun get_tabs(stx):
  match stx:
  | '$func
     ...
     let tabs:
      $tabs
     let slides:
      $slides':
      tabs
  | _: error("get_tabs: invalid glide program. Expected sequence of functions, then tabs:, then slides:")

fun get_slides(stx):
  match stx:
  | '$func_or_tabs
     ...
     let slides:
       $slides':
      slides
  | _: error("get_slides: glide expects a sequence of functions, with slides at the end")

fun get_slide_list(stx):
  stx_to_list(get_slides(stx))

fun func_name(stx):
  match stx:
  | 'fun $name($args, ...):
      $body':
      name.to_source_string()
  | _: error("func_name: glide expects a sequence of functions, with slides at the end")

fun find_last_func(stx):
  func_name(get_funcs(stx).last)


fun find_func(stx, name):
  (for List:
     each func in get_funcs(stx)
     skip_when func_name(func) != name
     func)[0]

// TODO use make_tmp_id to make an actually unique name?
fun get_fresh_slide_name(code):
  let func_names = get_funcs(code).map(func_name)
  for any:
    each i in 0..
    if !func_names.contains("slide" +& i)
    | Syntax.make_temp_id("slide" +& i, ~keep_name: #true)
    | #false

fun add_new_func(code, name):
  let new:
    'fun $name():
      nothing'
  let new_func:
    extend_tail(new,
                "\n\n")
  match code:
  | '$func
     ...
     $tabs
     $slidelist':
      '$func
       ...

       $new_func
       $tabs
       $slidelist'
  | _: error("add_new_func: glide expects a sequence of functions, with slides at the end")

fun stx_list_add(stx_list, new_stx):
  match stx_list:
  | '[$expr, ...]':
      let with_comma = extend_prefix(new_stx, ", ")
      brackets_syntax([expr, ..., with_comma], stx_list)
  | _: error("stx_list_add: expected list")

fun new_main_slide_ref(code, new_name):
  match code:
  | '$func
     ...
     let slides:
      $(exprs)':
      let new_name = '$new_name()'
      let new = stx_list_add(exprs, new_name)
      let funcs:
        '$func
         ...'
      '$funcs
       let slides:
        $new'
  | _: error("new_slide_ref: glide expects a sequence of functions, with slides at the end")

fun new_slide_ref(code, new_name, selected_tab):
  // if the selected tab is the last one, use new_main_slide_ref
  match code:
  | '$func
     ...
     let tabs:
      $tabs
     let slides:
      $slides':
      match tabs:
      | '[$tab, ...]':
          let tab_list = [tab, ...]
          if selected_tab == tab_list.length()
          | new_main_slide_ref(code, new_name)
          | let new_tab_list = stx_list_add(tab_list[selected_tab], '$new_name()')
            let new_tab_list = tab_list.set(selected_tab, new_tab_list)
            let new_tabs = brackets_syntax(new_tab_list, tabs)
            '$func
             ...
             let tabs:
               $new_tabs
             let slides:
               $slides'
      | ~else: error("new_slide_ref: expected list of tabs")
  | ~else: error("new_slide_ref: expected glide program")


// returns stx, but whereever it finds a glide call,
// it wraps it in a GPI__ call with a fresh number
fun add_pict_identities(stx) :: Syntax:
  def mutable current_id = 0
  traverse_stx(stx,
               fun (stx):
                 if is_glide_call(stx):
                 | block:
                     let current = current_id
                     current_id := current_id + 1
                     Syntax.relocate_group(
                       'GPI__($stx, $current)',
                       stx)
                 | stx)

fun remove_pict_identities(stx):
  traverse_stx(stx,
               fun (stx):
                 match stx:
                 | 'GPI__($pict, $n)':
                     pict
                 | _: stx)

fun is_glide_call(stx):
  match stx:
  | '$name($args, ...)':
      name.to_source_string() == "rectangle" || name.to_source_string() == "beside"
  | _: #false
