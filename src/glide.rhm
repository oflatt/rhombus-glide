#lang rhombus


import:
  rhombus/meta open
  pict open
  pict/text open
  pict/rhombus open
  rhombus/measure
  rhombus/runtime_path
  rhombus/fixnum expose:
    - as fm
  gui expose:
    ~>
    <~

export:
  glide


// Adds a Glide Pict Identity to a pict
// This gives a reference to it for selection. Used internally 
// by the Glide editor and removed before saving back to the source file.
fun GPI__(pict, n):
  pict.set_metadata({ "GlidePictIdentity": n })

fun replace_const(stx, newnum):
  match stx:
  | '$name ($arg, ...)':
      '$name ($(replace_const(arg, newnum)), ...)'
  | '~width: $num':
      '~width: $newnum'
  | _: stx


let screenW = 800
let screenH = 800

class Button(xpos, ypos, width, height):
  method draw(dc, inputState):
    let screenx = xpos * dc.height
    let screeny = ypos * dc.height
    let screenw = width * dc.height
    let screenh = height * dc.height
    let color:
      if this.isCursorIn(inputState)
      | "gray"
      | "white"

    rectangle(~width: width*dc.height, ~height: height*dc.height, ~fill: color, ~line: "black", ~line_width: 3).pad(~left: screenx, ~right: screeny).draw(dc)

  method isCursorIn(inputState):
    let screenx = xpos * screenH
    let screeny = ypos * screenH
    let screenw = width * screenH
    let screenh = height * screenH
    inputState.mouseX > screenx && inputState.mouseY > screeny && inputState.mouseX < screenx+screenw && inputState.mouseY < screeny+screenh  
    

class InputState(mouseX, mouseY)

class UI(selected):
  constructor
  | ():
      super(#false)

  method draw(dx, inputState):
    #false

// code is the current code for the body of the function
class Glide(inputState, code, old_code, ui, current_name, current_frame):
  method onmouse(ev):
    let with_input = this with (inputState = (this.inputState with (mouseX = ev.x, mouseY = ev.y)))

    let with_selected:
      if ev.kind == gui.MouseEvent.Kind.left_down:
      | block:
          let new_selected:
            find_clicked_pict(this.current_frame, ev, this.ui.selected)
          with_input with (ui = (with_input.ui with (selected = new_selected.metadata()["GlidePictIdentity"])))
      | with_input
    
    println(with_selected.ui.selected)

    let next_frame:
      eval('block:
              $(with_selected.code)
              $(with_selected.current_name)()')
    let with_current_frame:
      this with (current_frame = next_frame)
    
    with_current_frame

  method onkey(ev):
    if ev.code == Char"s" && gui.KeyEvent.Down.control in ev.downs:
    | dosave(this)
    | "other"
    this
  
  method current_func():
    find_func(this.code, this.current_name)

fun dosave(glide):
  let srcloc = glide.old_code.srcloc()
  println(srcloc)
  let source = filesystem.read_string(srcloc.source)
  let before = String.substring(source, 0, srcloc.position)
  let after:
    if srcloc.position + srcloc.span >= String.length(source)
    | ""
    | String.substring(source, srcloc.position + srcloc.span, String.length(source))
  let new_source = before +& glide.code +& after
  println(new_source)


// draw a glide state to the dc
fun draw(dc, glide):
  glide.current_frame.draw(dc)
  glide.ui.draw(dc, glide.inputState)

  // if we need to save because data.code is different from data.old_code, draw save icon
  if glide.code != glide.old_code:
  | let savePict = rectangle(~width: 50, ~height: 50, ~fill: "gray", ~line: "black", ~line_width: 3).pad(~left: 750, ~top: 750)
    savePict.draw(dc)
  | #false


fun onmousefor(state):
  fun onmouse(ev :: gui.MouseEvent, area):
    state <~ fun (old): old.onmouse(ev)
  onmouse

fun onkeyfor(state):
  fun onkey(ev :: gui.KeyEvent, area):
    state <~ fun (old): old.onkey(ev)
  onkey

fun get_funcs(stx):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...':
      ['fun $name($args, ...):
         $body',
       ...]
  | _: error("glide expects a sequence of functions")

fun func_name(stx):
  match stx:
  | 'fun $name($args, ...):
      $body':
      name
  | _: error("glide expects a sequence of functions")

fun find_last_func(stx):
  func_name(get_funcs(stx).last)


fun find_func(stx, name):
  (for List:
     each func in get_funcs(stx)
     skip_when func_name(func) != name
     func)[0]

fun edit_slide(stx):
  let ui = UI()
  let with_ids = add_pict_identities(stx)
  let state = gui.Obs(Glide(InputState(0, 0), with_ids, with_ids, ui, find_last_func(stx), nothing))
  

  let win = gui.Window(gui.Canvas(state, draw, ~mouse: onmousefor(state), ~key: onkeyfor(state)), ~size: [screenW, screenH])
  gui.render(win)


fun traverse_syntax(stx, f):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...':
      'fun $name($args, ...):
        $(f(body))
       ...'
  | '$call($args, ...)':
      f('$call($(traverse_syntax(args, f)), ...)')

fun is_glide_call(stx):
  match stx:
  | '$name($args, ...)':
      eval('"$name" == "tworectangles"')
  | _: #false


// returns stx, but whereever it finds a glide call,
// it wraps it in a GPI__ call with a fresh number
fun add_pict_identities(stx):
  def mutable current_id = 0

  [traverse_syntax(stx,
                   fun (stx):
                     if is_glide_call:
                     | block:
                        let current = current_id
                        current_id := current_id + 1
                        Syntax.relocate_group(
                          'GPI__($stx, $current_id)',
                          stx)
                     | stx),
   current_id]

fun find_pict_from_gpi(pict, n):
  if pict.metadata()["GlidePictIdentity"] == n
  | pict
  | block:
      (for any: 
        each child in pict.children()
        find_pict_from_gpi(child, n))

fun is_pict_clicked(overallpict, pict, ev):
  if pict.metadata()["GlidePictIdentity"]:
  | block:
      let found = overallpict.find(pict)
      let x = found.left
      let y = found.top
      let width = pict.width
      let height = pict.height
      ev.x > x && ev.x < x + width && ev.y > y && ev.y < y + height
  | #false

// recursively find a pict that was clicked, picking
// a child if something is already selected
fun find_clicked_pict(pict, clickev, current_selected):
  if current_selected:
  | block:
      let selected = find_pict_from_gpi(pict, current_selected)
      if is_pict_clicked(pict, selected, clickev)
      | if pict.children().length > 0:
        | find_first_clicked_pict(pict, pict.children(), clickev)
        | find_first_clicked_pict(pict, [pict], clickev)
      | find_first_clicked_pict(pict, [pict], clickev)
  | find_first_clicked_pict(pict, [pict], clickev)

fun find_first_clicked_pict(overall_pict, pict_children, click):
  for any:
    each child in pict_children
    if is_pict_clicked(overall_pict, child, click)
    | child
    | find_first_clicked_pict(overall_pict, child.children(), click)

// adds a keyword argument to a function call with the given value
// or modifies the value if the keyword is already present
fun modify_keyword_val_of(stx, keyword, new_val):
  match stx:
  | '$name($args, ...)':
      def mutable found = #false
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '$key: $val':
                            if key.to_source_string() == keyword
                            | block:
                                found := #true
                                '$key: $new_val'
                            | arg
                        | _: arg)
      let [new_arg, ...] = new_args
      '$name($(new_arg), ...)'
  | _: error("modify_keyword_val_of expects a function call")

fun add_to_keyword_val_of(stx, keyword, val_to_add):
  match stx:
  | '$name($args, ...)':
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '$key: $val':
                            if key.to_source_string() == keyword
                            | '$key: $val + $val_to_add'
                            | arg
                        | _: arg)
      let [new_arg, ...] = new_args
      '$name($(new_arg), ...)'
  | _: error("add_to_keyword_val_of expects a function call")

fun apply_to_gpi(stx, gpin, f):
  traverse_syntax(stx,
                  fun (stx):
                    match stx:
                    | 'GPI__($pict, $n)':
                        if n == gpin
                        | f(pict)
                        | stx
                    | _: stx)

// finds the pict source code with the given GPI number,
// replacing the keyword value with new_val
fun modify_keyword_val(stx, gpin, keyword, new_val):
  apply_to_gpi(stx, gpin,
               fun (pict):
                 modify_keyword_val_of(pict, keyword, new_val))

fun add_to_keyword_val(stx, gpin, keyword, val_to_add):
  apply_to_gpi(stx, gpin,
               fun (pict):
                 add_to_keyword_val_of(pict, keyword, val_to_add))

meta:
  fun glide(syntax):
    '«edit_slide('$(syntax)')»'

defn.macro 'glide:
              fun $name($args, ...):
                $body
              ...':
  glide('fun $name($args, ...):
            $body
         ...')
