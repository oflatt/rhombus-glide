#lang rhombus


import:
  rhombus/meta open
  pict open
  pict/text open
  pict/rhombus open
  rhombus/measure
  rhombus/runtime_path
  rhombus/fixnum expose:
    - as fm
  gui expose:
    ~>
    <~
  "traverse_rhombus.rhm" open
  "wrap_stx.rhm" open

export:
  glide
  pad
  Rendered
  draw_slide

fun set_width(pict, width):
  let current_width = pict.width
  pict.pad(~right: width - current_width)

fun set_height(pict, height):
  let current_height = pict.height
  pict.pad(~bottom: height - current_height)

// Adds a Glide Pict Identity to a pict
// This gives a reference to it for selection. Used internally 
// by the Glide editor and removed before saving back to the source file.
fun GPI__(pict, n):
  pict.set_metadata({ "GlidePictIdentity": n })

fun replace_const(stx, newnum):
  match stx:
  | '$name ($arg, ...)':
      '$name ($(replace_const(arg, newnum)), ...)'
  | '~width: $num':
      '~width: $newnum'
  | _: stx


let initialScreenW = 1100
let initialScreenH = 800 
    

class InputState(downMouseX, downMouseY)

class Tab(scrollBarPos):
  method draw(dx, picts):
    // draw the pict on the left side of the screen
    for (pict in picts):
      pict.draw(dx)

class UI(selected, config, original_config_stx, tabs, tab_screen_width):
  method draw(dx, inputState, current_rendered):
    if this.selected:
    | block:
        let selected_pict = find_pict_from_gpi(current_rendered.selected_slide, this.selected)
        let (x, y) = Find(selected_pict, ~horiz: #'left, ~vert: #'top).in(current_rendered.selected_slide)
        let width = selected_pict.width
        let height = selected_pict.height
        rectangle(~width: width, ~height: height, ~fill: #false, ~line: "blue", ~line_width: 4).pad(~left: x, ~top: y).draw(dx)
    | #false

    // todo draw selected tab
    //for (tab in this.tabs):
      //tab.draw(dx, current_rendered.slides)  


fun distance(x1, y1, x2, y2):
  math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))

class Rendered(selected_slide, slides)

fun draw_slide(pict):
  let slide = rectangle(~width: 800, ~height: 800, ~fill: "white")
  overlay(slide, pict, ~horiz: #'left, ~vert: #'top)

// inputState is an InputState object
// code is the current code for the body of the function
// old_code is the code that we loaded in from the file
// ui is a UI object
// current_slide_index is the index of the current slide
class Glide(inputState, code, old_code, ui, current_slide_index):
  method current_rendered() :: Rendered:
    let slides = get_slide_list(this.code)
    let [slide, ...] = slides
    let room_for_tabs = initialScreenW * ui.tab_screen_width
    eval('block:
            $(this.code)
            Rendered(draw_slide($(slides[this.current_slide_index])).pad(~left: $room_for_tabs), [draw_slide($slide), ...])')

  method on_mouse(ev):
    let current_rendered:
      this.current_rendered()
  
    let with_input:
      if ev.kind == gui.MouseEvent.Kind.left_down:
      | this with (inputState = (this.inputState with (downMouseX = ev.x, downMouseY = ev.y)))
      | this

    let with_selected:
      cond 
      | ev.kind == gui.MouseEvent.Kind.left_up && distance(this.inputState.downMouseX, this.inputState.downMouseY, ev.x, ev.y) < 10:
          let new_selected:
            find_clicked_pict(current_rendered.selected_slide, ev, this.ui.selected)
          if new_selected:
          | with_input with (ui = (with_input.ui with (selected = new_selected.metadata()["GlidePictIdentity"])))
          | with_input with (ui = (with_input.ui with (selected = #false)))
      | ev.kind == gui.MouseEvent.Kind.left_up:
          with_input with (code = add_padding_to(this.code, this.ui.selected, ev.x - this.inputState.downMouseX, ev.y - this.inputState.downMouseY))
      | ~else: with_input
    
    with_selected

  method onkey(ev):
    if ev.code == Char"s" && gui.KeyEvent.Down.control in ev.downs:
    | do_save(this)
    | "other"

    if gui.KeyEvent.Key.escape == ev.code:
    | this with (ui = (this.ui with (selected = #false)))
    | this

fun repeat_str(str, amt):
  def mutable res = ""
  for (i in 0..amt):
    res := res +& str
  res

fun indent(code, amt):
  let lines = String.split(code, "\n")
  let indented = (for List:
                    each line in lines
                    repeat_str(" ", amt) +& line)
  String.join(indented, "\n")

fun do_save(glide):
  let srcloc = glide.old_code.srcloc()
  
  let source = filesystem.read_string(srcloc.source)
  let before = String.substring(source, 0, srcloc.position-3)
  let after:
    if srcloc.position + srcloc.span >= String.length(source)
    | ""
    | String.substring(source, srcloc.position + srcloc.span-1, String.length(source))

  let identities_removed = remove_pict_identities(glide.code)
  let new_middle = indent(identities_removed.to_source_string(), 2)

  let new_source = before +& new_middle +& after
  
  println("saving to: " +& srcloc.source)
  filesystem.write_string(srcloc.source, new_source, ~exists: #'replace)



fun draw_for(state):
  // draw a glide state to the dc
  fun draw(dc, glide):
    let current_rendered = glide.current_rendered()
    current_rendered.selected_slide.draw(dc)
    glide.ui.draw(dc, glide.inputState, current_rendered)

    // if we need to save because data.code is different from data.old_code, draw save icon
    if glide.code != glide.old_code:
    | let savePict = rectangle(~width: 50, ~height: 50, ~fill: "gray", ~line: "black", ~line_width: 3).pad(~left: 750, ~top: 750)
      savePict.draw(dc)
    | #false
  draw
  


fun on_mousefor(state):
  fun on_mouse(ev :: gui.MouseEvent, area):
    state <~ fun (old): old.on_mouse(ev)
  on_mouse

fun onkeyfor(state):
  fun onkey(ev :: gui.KeyEvent, area):
    state <~ fun (old): old.onkey(ev)
  onkey

fun get_funcs(stx):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...
     [$func_name, ...]':
      ['fun $name($args, ...):
         $body',
       ...]
  | _: error("glide expects a sequence of functions, with slides at the end")

fun get_slide_list(stx):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...
     [$expr, ...]':
      [expr, ...]
  | _: error("glide expects a sequence of functions, with slides at the end")

fun func_name(stx):
  match stx:
  | 'fun $name($args, ...):
      $body':
      name
  | _: error("glide expects a sequence of functions, with slides at the end")

fun find_last_func(stx):
  func_name(get_funcs(stx).last)


fun find_func(stx, name):
  (for List:
     each func in get_funcs(stx)
     skip_when func_name(func) != name
     func)[0]

fun edit_slide(stx, config_stx):
  let ui = UI(#false, eval(config_stx), config_stx, [Tab(0)], 0.2)
  let with_ids = add_pict_identities(stx)
  println("with_ids: " +& with_ids.to_source_string())
  let state = gui.Obs(Glide(InputState(0, 0), with_ids, with_ids, ui, 0))

  let win = gui.Window(gui.Canvas(state, draw_for(state), ~mouse: on_mousefor(state), ~key: onkeyfor(state)), ~size: [initialScreenW, initialScreenH])
  gui.render(win)

fun is_glide_call(stx):
  match stx:
  | '$name($args, ...)':
      name.to_source_string() == "rectangle" || name.to_source_string() == "beside"
  | _: #false


// returns stx, but whereever it finds a glide call,
// it wraps it in a GPI__ call with a fresh number
fun add_pict_identities(stx) :: Syntax:
  def mutable current_id = 0
  traverse_stx(stx,
               fun (stx):
                 if is_glide_call(stx):
                 | block:
                     let current = current_id
                     current_id := current_id + 1
                     Syntax.relocate_group(
                       'GPI__($stx, $current)',
                       stx)
                 | stx)

fun remove_pict_identities(stx):
  traverse_stx(stx,
               fun (stx):
                 match stx:
                 | 'GPI__($pict, $n)':
                     pict
                 | _: stx)

fun find_pict_from_gpi(pict, n):
  if pict.metadata().get("GlidePictIdentity", #false) == n
  | pict
  | block:
      (for any: 
        each child in pict.children
        find_pict_from_gpi(child, n))

fun is_pict_clicked(overallpict, pict, ev):
  if pict.metadata().get("GlidePictIdentity", #false):
  | block:
      let (x, y) = Find(pict, ~horiz: #'left, ~vert: #'top).in(overallpict)
      let width = pict.width
      let height = pict.height
      println("identity: " +& pict.metadata().get("GlidePictIdentity", #false))
      println("x: " +& x +& " y: " +& y +& " width: " +& width +& " height: " +& height +& " ev.x: " +& ev.x +& " ev.y: " +& ev.y)
      ev.x > x && ev.x < x + width && ev.y > y && ev.y < y + height
  | #false

// recursively find a pict that was clicked, picking
// a child if something is already selected
fun find_clicked_pict(pict, clickev, current_selected):
  println("pict: " +& pict)
  if current_selected:
  | block:
      let selected = find_pict_from_gpi(pict, current_selected)
      if is_pict_clicked(pict, selected, clickev)
      | block:
          if selected.children.length() > 0:
          | find_first_clicked_pict(pict, selected.children, clickev)
          | find_first_clicked_pict(pict, [pict], clickev)
      | find_first_clicked_pict(pict, [pict], clickev)
  | find_first_clicked_pict(pict, [pict], clickev)

fun find_first_clicked_pict(overall_pict, pict_children, click):
  for any:
    each child in pict_children
    if is_pict_clicked(overall_pict, child, click)
    | block:
        println("found clicked pict")
        child
    | find_first_clicked_pict(overall_pict, child.children, click)

// adds a keyword argument to a function call with the given value
// or modifies the value if the keyword is already present
fun modify_keyword_val_of(stx, keyword, new_val):
  match stx:
  | '$name($args, ...)':
      def mutable found = #false
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '$key: $val':
                            if key.to_source_string() == keyword
                            | block:
                                found := #true
                                '$key: $new_val'
                            | arg
                        | _: arg)
      let [new_arg, ...] = new_args
      '$name($(new_arg), ...)'
  | _: error("modify_keyword_val_of expects a function call")

fun add_to_keyword_val_of(stx, keyword, val_to_add):
  match stx:
  | '$name($args, ...)':
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '$key: $val':
                            if key.to_source_string() == keyword
                            | '$key: $val + $val_to_add'
                            | arg
                        | _: arg)
      let [new_arg, ...] = new_args
      '$name($(new_arg), ...)'
  | _: error("add_to_keyword_val_of expects a function call")

fun apply_to_gpi(stx, gpin, f):
  traverse_stx(stx,
               fun (stx):
                 match stx:
                 | 'GPI__($pict, $n)':
                     println("applying to gpi: " +& n)
                     if eval(n) == gpin
                     | f(stx)
                     | stx
                 | _: stx)

// finds the pict source code with the given GPI number,
// replacing the keyword value with new_val
fun modify_keyword_val(stx, gpin, keyword, new_val):
  apply_to_gpi(stx, gpin,
               fun (pict):
                 modify_keyword_val_of(pict, keyword, new_val))

fun add_to_keyword_val(stx, gpin, keyword, val_to_add):
  apply_to_gpi(stx, gpin,
               fun (pict):
                 add_to_keyword_val_of(pict, keyword, val_to_add))

fun add_padding_to(stx, gpin, dx, dy):
  let padding_left_pos = dx
  let padding_top_pos = dy
  let res:
    apply_to_gpi(stx, gpin,
                 fun (pict):
                  wrap_pad(pict, padding_left_pos, padding_top_pos))
  println("before: " +& stx.to_source_string())
  println("with padding: " +& res.to_source_string())
  println(res)
  res

meta:
  fun glide(syntax, config):
    '«edit_slide('$(syntax)', '$(config)')»'

defn.macro 'glide $config:
              $stx':
  glide(stx, config)
