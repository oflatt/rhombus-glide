#lang rhombus


import:
  rhombus/meta open
  pict open
  pict/text open
  pict/rhombus open
  rhombus/measure
  rhombus/runtime_path
  rhombus/fixnum expose:
    - as fm
  gui expose:
    ~>
    <~

export:
  glide


// Adds a Glide Pict Identity to a pict
// This gives a reference to it for selection. Used internally 
// by the Glide editor and removed before saving back to the source file.
fun GPI__(pict, n):
  pict.set_metadata({ "GlidePictIdentity": n })

fun replace_const(stx, newnum):
  match stx:
  | '$name ($arg, ...)':
      '$name ($(replace_const(arg, newnum)), ...)'
  | '~width: $num':
      '~width: $newnum'
  | _: stx


let screenW = 800
let screenH = 800

class Button(xpos, ypos, width, height):
  method draw(dc, inputState):
    let screenx = xpos * dc.height
    let screeny = ypos * dc.height
    let screenw = width * dc.height
    let screenh = height * dc.height
    let color:
      if this.isCursorIn(inputState)
      | "gray"
      | "white"

    rectangle(~width: width*dc.height, ~height: height*dc.height, ~fill: color, ~line: "black", ~line_width: 3).pad(~left: screenx, ~right: screeny).draw(dc)

  method isCursorIn(inputState):
    let screenx = xpos * screenH
    let screeny = ypos * screenH
    let screenw = width * screenH
    let screenh = height * screenH
    inputState.mouseX > screenx && inputState.mouseY > screeny && inputState.mouseX < screenx+screenw && inputState.mouseY < screeny+screenh  
    

class InputState(mouseX, mouseY)

class UI(selected):
  constructor
  | ():
      super(#false)

  method draw(dx, inputState):
    #false

// code is the current code for the body of the function
class Glide(inputState, code, old_code, ui, current_name):
  method onmouse(ev):
    let with_input = this with (inputState = (this.inputState with (mouseX = ev.x, mouseY = ev.y)))
    with_input

  method onkey(ev):
    if ev.code == Char"s" && gui.KeyEvent.Down.control in ev.downs:
    | dosave(this)
    | "other"
    this
  
  method current_func():
    find_func(this.code, this.current_name)

fun dosave(glide):
  let srcloc = glide.old_code.srcloc()
  println(srcloc)
  let source = filesystem.read_string(srcloc.source)
  let before = String.substring(source, 0, srcloc.position)
  let after:
    if srcloc.position + srcloc.span >= String.length(source)
    | ""
    | String.substring(source, srcloc.position + srcloc.span, String.length(source))
  let new_source = before +& glide.code +& after
  println(new_source)


// draw a glide state to the dc
fun draw(dc, glide):
  eval('$(glide.code)
        ($glide.current_name)()').draw(dc)
  glide.ui.draw(dc, glide.inputState)

  // if we need to save because data.code is different from data.old_code, draw save icon
  if glide.code != glide.old_code:
  | let savePict = rectangle(~width: 50, ~height: 50, ~fill: "gray", ~line: "black", ~line_width: 3).pad(~left: 750, ~top: 750)
    savePict.draw(dc)
  | #false


fun onmousefor(state):
  fun onmouse(ev :: gui.MouseEvent, area):
    state <~ fun (old): old.onmouse(ev)
  onmouse

fun onkeyfor(state):
  fun onkey(ev :: gui.KeyEvent, area):
    state <~ fun (old): old.onkey(ev)
  onkey

fun get_funcs(stx):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...':
      ['fun $name($args, ...):
         $body',
       ...]
  | _: error("glide expects a sequence of functions")

fun func_name(stx):
  match stx:
  | 'fun $name($args, ...):
      $body':
      name
  | _: error("glide expects a sequence of functions")

fun find_last_func(stx):
  func_name(get_funcs(stx).last)


fun find_func(stx, name):
  (for List:
     each func in get_funcs(stx)
     skip_when func_name(func) != name
     func)[0]

fun edit_slide(stx):
  let ui = UI()
  let state = gui.Obs(Glide(InputState(0, 0), stx, stx, ui, find_last_func(stx)))
  

  let win = gui.Window(gui.Canvas(state, draw, ~mouse: onmousefor(state), ~key: onkeyfor(state)), ~size: [screenW, screenH])
  gui.render(win)


fun traverse_syntax(stx, f):
  match stx:
  | 'fun $name($args, ...):
      $body
     ...':
      'fun $name($args, ...):
        $(f(body))
       ...'
  | '$call($args, ...)':
      f('$call($(traverse_syntax(args, f)), ...)')

fun is_glide_call(stx):
  match stx:
  | '$name($args, ...)':
      eval('"$name" == "tworectangles"')
  | _: #false


// returns stx, but whereever it finds a glide call,
// it wraps it in a GPI__ call with a fresh number
fun add_pict_identities(stx):
  def mutable current_id = 0

  [traverse_syntax(stx,
                   fun (stx):
                     if is_glide_call:
                     | block:
                        let current = current_id
                        current_id := current_id + 1
                        'GPI__($stx, $current_id)'
                     | stx),
   current_id]

fun find_pict_from_gpi(pict, n):
  if pict.metadata()["GlidePictIdentity"] == n
  | pict
  | block:
      (for any: 
        each child in pict.children()
        find_pict_from_gpi(child, n))

// adds a keyword argument to a function call with the given value
// or modifies the value if the keyword is already present
fun modify_keyword_val_of(stx, keyword, new_val):
  match stx:
  | '$name($args, ...)':
      def mutable found = #false
      let new_args = (for List:
                        each arg in [args, ...]
                        match arg:
                        | '~$key: $val':
                            if key == keyword
                            | block:
                                found := #true
                                '~$key: $new_val'
                            | arg
                        | _: arg)
      '$name($(new_args), ...)'

// finds the pict source code with the given GPI number,
// replacing the keyword value with new_val
fun modify_keyword_val(stx, gpin, keyword, new_val):
  traverse_syntax(stx,
                  fun (stx):
                    match stx:
                    | 'GPI__($pict, $n)':
                        if n == gpin
                        | modify_keyword_val_of(stx, new_val)
                        | stx
                    | _: stx)

meta:
  fun glide(syntax):
    '«edit_slide('$(syntax)')»'

defn.macro 'glide:
              fun $name($args, ...):
                $body
              ...':
  glide('fun $name($args, ...):
            $body
         ...')

