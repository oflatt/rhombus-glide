#lang rhombus


import:
  rhombus/meta open
  pict open
  pict/text open
  pict/rhombus open
  rhombus/measure
  rhombus/runtime_path
  rhombus/fixnum expose:
    - as fm
  gui expose:
    ~>
    <~
  "traverse_rhombus.rhm" open
  "ui.rhm" open
  "stx_helpers.rhm" open
  "wrap_stx.rhm" open

export:
  glide
  pad
  Rendered
  draw_slide

fun set_width(pict, width):
  let current_width = pict.width
  pict.pad(~right: width - current_width)

fun set_height(pict, height):
  let current_height = pict.height
  pict.pad(~bottom: height - current_height)

class InputState(downMouseX, downMouseY)


fun distance(x1, y1, x2, y2):
  math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))

class Rendered(selected_slide, slides)

fun draw_slide(pict):
  let slide = rectangle(~width: initialScreenH * aspect_ratio, ~height: initialScreenH, ~fill: "white")
  overlay(slide, pict, ~horiz: #'left, ~vert: #'top)

// inputState is an InputState object
// code is the current code for the body of the function
// old_code is the code that we loaded in from the file
// ui is a UI object
// current_slide_index is the index of the current slide
class Glide(inputState, code, old_code, ui):
  method current_rendered() :: Rendered:
    let slides = get_slide_list(this.code)
    let [slide, ...] = slides
    let room_for_tabs = initialScreenW * ui.tab_screen_width
    eval('block:
            $(this.code)
            Rendered(draw_slide($(slides[this.ui.current_slide_index])).pad(~left: $room_for_tabs), [draw_slide($slide), ...])')

  method on_mouse(ev):
    let current_rendered:
      this.current_rendered()
  
    let with_input:
      if ev.kind == gui.MouseEvent.Kind.left_down:
      | this with (inputState = (this.inputState with (downMouseX = ev.x, downMouseY = ev.y)))
      | this

    let with_selected:
      cond 
      | ev.kind == gui.MouseEvent.Kind.left_up && distance(this.inputState.downMouseX, this.inputState.downMouseY, ev.x, ev.y) < 10:
          let new_selected:
            find_clicked_pict(current_rendered.selected_slide, ev, this.ui.selected)
          if new_selected:
          | with_input with (ui = (with_input.ui with (selected = new_selected.metadata()["GlidePictIdentity"])))
          | with_input with (ui = (with_input.ui with (selected = #false)))
      | ev.kind == gui.MouseEvent.Kind.left_up:
          with_input with (code = add_padding_to(this.code, this.ui.selected, ev.x - this.inputState.downMouseX, ev.y - this.inputState.downMouseY))
      | ~else: with_input
    
    let with_ui_event:
      with_selected with (ui = with_selected.ui.on_mouse(ev, current_rendered))

    // when a new slide is needed, the UI sets the current slide out of bounds
    // add a new slide here to fix this problem
    let with_new_slide:
      if with_ui_event.ui.current_slide_index == current_rendered.slides.length():
      | with_ui_event.add_new_slide()
      | with_ui_event

    with_new_slide

  method onkey(ev):
    if ev.code == Char"s" && gui.KeyEvent.Down.control in ev.downs:
    | do_save(this)
    | "other"

    if gui.KeyEvent.Key.escape == ev.code:
    | this with (ui = (this.ui with (selected = #false)))
    | this

  method add_new_slide():
    let fresh_slide_name = get_fresh_slide_name(this.code)
    let new_code = new_slide_ref(add_new_func(this.code, fresh_slide_name), fresh_slide_name)
    this with (code = new_code)

fun repeat_str(str, amt):
  def mutable res = ""
  for (i in 0..amt):
    res := res +& str
  res

fun indent(code, amt):
  let lines = String.split(code, "\n")
  let indented = (for List:
                    each line in lines
                    repeat_str(" ", amt) +& line)
  String.join(indented, "\n")

fun do_save(glide):
  let srcloc = glide.old_code.srcloc()
  
  let source = filesystem.read_string(srcloc.source)
  let before = String.substring(source, 0, srcloc.position-3)
  let after:
    if srcloc.position + srcloc.span >= String.length(source)
    | ""
    | String.substring(source, srcloc.position + srcloc.span-1, String.length(source))

  let identities_removed = remove_pict_identities(glide.code)
  let new_middle = indent(identities_removed.to_source_string(), 2)

  let new_source = before +& new_middle +& after
  
  println("saving to: " +& srcloc.source)
  filesystem.write_string(srcloc.source, new_source, ~exists: #'replace)



fun draw_for(state):
  // draw a glide state to the dc
  fun draw(dc, glide):
    let current_rendered = glide.current_rendered()
    current_rendered.selected_slide.draw(dc)
    glide.ui.draw(dc, glide.inputState, current_rendered)

    // if we need to save because data.code is different from data.old_code, draw save icon
    if glide.code != glide.old_code:
    | let savePict = rectangle(~width: 50, ~height: 50, ~fill: "gray", ~line: "black", ~line_width: 3).pad(~left: 750, ~top: 750)
      savePict.draw(dc)
    | #false
  draw
  


fun on_mousefor(state):
  fun on_mouse(ev :: gui.MouseEvent, area):
    state <~ fun (old): old.on_mouse(ev)
  on_mouse

fun onkeyfor(state):
  fun onkey(ev :: gui.KeyEvent, area):
    state <~ fun (old): old.onkey(ev)
  onkey


fun edit_slide(stx, config_stx):
  let ui = UI(#false, eval(config_stx), config_stx, [Tab(0, "slides")], 0.2, 0, 1)
  let with_ids = add_pict_identities(stx)
  println("with_ids: " +& with_ids.to_source_string())
  let state = gui.Obs(Glide(InputState(0, 0), with_ids, with_ids, ui))

  let win = gui.Window(gui.Canvas(state, draw_for(state), ~mouse: on_mousefor(state), ~key: onkeyfor(state)), ~size: [initialScreenW, initialScreenH])
  gui.render(win)

fun is_glide_call(stx):
  match stx:
  | '$name($args, ...)':
      name.to_source_string() == "rectangle" || name.to_source_string() == "beside"
  | _: #false


// returns stx, but whereever it finds a glide call,
// it wraps it in a GPI__ call with a fresh number
fun add_pict_identities(stx) :: Syntax:
  def mutable current_id = 0
  traverse_stx(stx,
               fun (stx):
                 if is_glide_call(stx):
                 | block:
                     let current = current_id
                     current_id := current_id + 1
                     Syntax.relocate_group(
                       'GPI__($stx, $current)',
                       stx)
                 | stx)

fun remove_pict_identities(stx):
  traverse_stx(stx,
               fun (stx):
                 match stx:
                 | 'GPI__($pict, $n)':
                     pict
                 | _: stx)





meta:
  fun glide(syntax, config):
    '«edit_slide('$(syntax)', '$(config)')»'

defn.macro 'glide $config:
              $stx':
  glide(stx, config)
