#lang rhombus/static/and_meta

import:
  rhombus/meta open
  "rebuild.rhm" open
  meta:
    "rebuild.rhm" open
  pict/rhombus open
  


export:
  traverse_stx


fun is_literal_group(stx):
  match stx
  | 'Syntax.literal_group $_': #true
  | ~else: #false

fun extract_literal(stx):
  match stx
  | '$_ $_ $_($(stxs :: Multi))': stxs

fun nested([g, ...], builder, builder_stx, stxs, f):
  let [new_g, ...] = [traverse_group(g, f), ...]
  f(builder([new_g, ...], stxs))

fun group_context(g):
  Syntax.relocate_group('#false', g)

fun traverse_stx(stx :: Syntax, f) :: Syntax:
  cond
  | stx is_a Group: traverse_group(stx, f)
  | stx is_a Term: traverse_term(stx, f)
  | ~else: traverse_multi(stx, f)

fun traverse_multi(stx :: Syntax, f) :: Syntax:
  f(match stx
    | '$group
       ...':
        let [new_stx, ...] = [traverse_stx(group, f), ...]
        '$new_stx
         ...'
    | ~else: error("not a multi: " +& stx.to_source_string()))

fun traverse_group(g, f) :: Syntax:
  f(block:
      let new_g = traverse_tail(g, f)
      Syntax.relocate_group(new_g, group_context(g)))

fun traverse_tail(stxs, f):
  f(match stxs
    | '$head $tail ...':
        let new_head = traverse_term(head, f)
        let new_tail = traverse_tail('$tail ...', f)
        sequence_append_syntax(new_head, new_tail)
    | '': stxs
    | ~else: stxs)

fun nested_alts([b, ...], stxs, f):
  let [new_b, ...] = [traverse_term(b, f), ...]
  alts_syntax([new_b, ...], stxs)

fun traverse_term(stxs:: Syntax, f) :: Syntax:
  f(match stxs:
    | '($(g :: Group), ...)':
        nested([g, ...], parens_syntax, 'parens_syntax', stxs, f)
    | '[$(g :: Group), ...]':
        nested([g, ...], brackets_syntax, 'brackets_syntax', stxs, f)
    | '{$(g :: Group), ...}':
        nested([g, ...], braces_syntax, 'braces_syntax', stxs, f)
    | '«'$(g:: Group); ...'»':
        nested([g, ...], quotes_syntax, 'quotes_syntax', stxs, f)
    | ': $(g :: Group); ...':
        println("block syntax: " +& stxs.to_source_string())
        nested([g, ...], block_syntax, 'block_syntax', stxs, f)
    | '| $(b :: Block) | ...':
        nested_alts([b, ...], stxs, f)
    | ~else:
        stxs)

